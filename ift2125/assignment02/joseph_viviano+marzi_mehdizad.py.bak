#!/usr/bin/env python
# Student 1 : Joseph D Viviano
# Student 2 : Marzi Mehdizad
"""
a) yes.
   m = {1,2,3,4,5,6}
   s_1 = {1,2}
   s_2 = {3,4}
   s_3 = {1,2,3,4}
   S = {{}, {5}, {6}, {5,6}}

   + contains empty
   + heridity, yes, {5} and {6} inherited from {5,6}
   + exchangability, yes, {6} and {5} can be exchanged to produce {5,6}, no
     new sets are created.

b) no. if this procedure never returns an empty set, it cannot be a matroid! a
   matroid always contains an empty set (trivial condition!)
   m = {1,2,3,4,5,6}
   s_1 = {1,2}
   s_2 = {3,4}
   s_3 = {1,2,3,4}
   S = {{1}, {2}, {3}, {4}, {1,2}, {1,3}, ..., {1,2,3,4}}

"""

import numpy as np
import random
import sys


def random_graph(n,m):
    """
    Input : size n, m
    Output : matrix -- A[i,j] = 1 if S_i contains the element j
    """
    # make n x m boolean array
    A = np.array([[random.randint(0,1) for i in range(n)] for j in range(m)])
    A = A.astype(np.int)

    return(A)


def has_overlap(x, y):
    """
    Compares intersection of two boolean arrays (represented as integers). If
    they have any overlap, return True, else, False.
    """
    idx_x = np.where(x)[0]
    idx_y = np.where(y)[0]
    inter = np.intersect1d(idx_x, idx_y)

    if len(inter) > 0:
        return(True)
    else:
        return(False)


def intersection(A):
    """
    Calculates the set S of minimum cardinality with the set of sets {S1...Si}.
    We start with S = S1. Then, for each set Sn, if S intersects with Sn, we
    don't do anything, otherwise, we (greedily) take one element of Sn.
    """
    # trivial case: if any set in A is empty, return an empty set
    S_count = np.sum(A, axis=1)
    if len(np.where(S_count == 0)[0]) > 0:
        return(set())

    # stores the S of minimum cardinality (as the characteristic function)
    min_card = np.zeros(len(A[0])).astype(np.int)

    # 1, 2, ..., n
    all_n = np.arange(1, len(min_card)+1)

    while np.shape(A)[0] != 0:

        # counts the number of S_i that each element of the set contributes to
        S_count = np.sum(A, axis=0)

        # remove counts of set elements we've already added to min_card
        #idx_remove = np.where(min_card)[0]
        #if len(idx_remove) > 0:
        #    S_count[idx_remove] = 0

        # finds the current new set element that contributes to the maximum
        # number of S_i's (implicitly tiebreaks using [-1])
        this_max = all_n[S_count == np.max(S_count)][-1]
        min_card[this_max-1] = 1
        idx_remove = np.where(A[:, this_max-1])[0]
        A = np.delete(A, idx_remove, 0)
        print('{}: A shape={}'.format(A, np.shape(A)))
        #print(min_card)
        ## check whether min_card contains >= 1 element in all sets in A
        #for a in A:
        #    if not has_overlap(min_card, a):
        #        changes = True
        #        break

        #    # if we make it all the way through A, break the loop
        #    changes = False

    S = set(all_n[min_card.astype(np.bool)]) # return only the candidates

    return(S)


def experiment(n, m, nb_experiments):
    """Calculates the size of the minimum cardinal sets across nb_experiments"""
    size_of_S = []

    for exp in range(nb_experiments):
        #A = random_graph(n, m)
        A = np.genfromtxt('graph.csv').astype(np.int)
        S = intersection(A)
        print(S)
        sys.exit()
        #size_of_S.append(len(S))

    return(size_of_S)


if __name__=="__main__":

    n = 20
    m = 100
    k = 50

    size_of_S = experiment(m, m, k)
    print("mean", np.mean(size_of_S), "std", np.std(size_of_S))


